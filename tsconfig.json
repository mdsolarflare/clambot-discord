{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    // --- Target and Module Resolution ---
    "target": "ES2024", // Compile down to ES2024. This is the latest stable version.
    "module": "NodeNext", // Use Node's native ESM module resolution. Crucial for modern Node.js and Discord.js.
    "moduleResolution": "NodeNext", // Tells TypeScript how to resolve modules. "NodeNext" is generally the best for Node.js.
    "esModuleInterop": true, // Allows `import * as React from "react"` or `import React from "react"` for CommonJS modules.
    "forceConsistentCasingInFileNames": true, // Ensures consistent casing for file names to prevent issues on case-sensitive file systems.

    // --- Output Options ---
    "outDir": "./dist", // Output directory for compiled JavaScript files.
    "rootDir": "./src", // Root directory of your TypeScript source files.
    "declaration": true, // Generate declaration files (.d.ts) for your modules. Good for larger projects or libraries.
    "declarationMap": true, // Generate sourcemaps for declaration files.
    "sourceMap": true, // Generate sourcemaps for debugging compiled JavaScript.

    // --- Strictness and Type Checking ---
    "strict": true, // Enables all strict type-checking options below. Highly recommended for robust code.
    "noImplicitAny": true, // Disallow implicit `any` types.
    "noUnusedLocals": true, // Report errors on unused local variables.
    "noUnusedParameters": true, // Report errors on unused parameters.
    "noImplicitReturns": true, // Ensure all code paths in a function return a value.
    "noFallthroughCasesInSwitch": true, // Report errors for fallthrough cases in switch statements.
    "noUncheckedIndexedAccess": true, // Adds 'undefined' to index signatures. Useful for catching potential runtime errors.
    "exactOptionalPropertyTypes": true, // When true, the optional property type becomes 'T | undefined' instead of just 'T'.

    // --- Library and Environment ---
    "lib": ["ES2024"], // Include type definitions for ES2024. For Node.js, you generally don't need "DOM".
    // If you were building a web frontend or using specific browser APIs within your bot (less common), you might add "DOM":
    // "lib": ["ES2024", "DOM"],

    // --- Other Recommended Options ---
    "skipLibCheck": true, // Skips type checking of all declaration files (*.d.ts). Can speed up compilation.
                          // Useful for external libraries that might have slight type mismatches, though `strict` helps overall.
    "resolveJsonModule": true // Allows importing .json files as modules.
  },
  "include": [
    "src/**/*.ts" // Include all .ts files within the 'src' directory and its subdirectories.
  ],
  "exclude": [
    "node_modules", // Exclude the node_modules directory from compilation.
    "dist" // Exclude the output directory to prevent infinite loops during compilation.
  ]
}